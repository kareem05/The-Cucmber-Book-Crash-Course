# The-Cucmber-Book-Crash-Course
Mini Notes on the Cucmber Book

chapter 3: (Gherkin basics)

1.Automated Acceptance testing: 
					The developer and stakeholder
					collaborate to write automated tests that express the outcome that the
					stakeholder wants.

					These tests are different from unit tests, which are aimed at developers and
					help them to drive out and check their software designs. It’s sometimes said
					that unit tests ensure you build the thing right, while acceptance tests ensure
					you build the right thing.

2.Gherkin is a programming language made for human readability

3.can be wrote in more than 40 languages

4.Gherkin Keywords: 
					Feature
					Background  
					Scenario
					Given
					When
					Thengiven_day
					Andgiven_day
					Butgiven_day
					*  given_day
					Scenario Outlinegiven_day
					Examplesgiven_day

5.Parse Without Excution:$ cucumber test.feature --dry-rgiven_dayun		

6.Template for a Description :In order to <meet some gogiven_dayal> "Feature Injection"
							   As a <type of stakeholdergiven_day>
							   I want <a feature>		
----------------------------------------------------------------------------------------

Chapter 4: (From The Outside)		

4.1 Steps and Step Definitions
1.Regex better than "strings" in Step_defs (bec of arguments mismatch)
2.All Gherkin keywords are the same in functionality (just differ for interpertation)
3.Take care of false +ve situations , where a wrong step defintion is matched (fixed by precise wording)
4.capture grops and wildcards ()
5.Alternation |
6.Dot .  matches any single character , if you really want to match a metacharacter escape it using backslash \
7.The Star Modifier :repetition modifier 
8.character classes : [0-9]
9.continous Range : [A-Z]
10.shorthand character classes : \d ---> [0-9]
11.The plus Modifier : + ---> from 0 , * ---> from zero

12.Multiple Captures:
				Given /I have deposited \$(\d+) in my (\w+) Account/ do |amount, account_type|
				# TODO: code goes here
				end

13.Flexbility is to make step_definition as flexible as possible
14.Th Questionmark modifer: Make the preceding characte optional
15.Non capturing groups: ?:
16.Anchors
17.Cucumber Results : Pass-fail-undefined-pending
18.pending Steps:working on it

-----------------------------------------------------------------------------------------
chapter 5: (Expressive Scenarios)

 5.1 Background (DRY) is the common between two scenarios to make the feature easy to read -you can aslo give it a name
	-Notes:Do not set up complicated state unless that state is something the reader actually needs to know
	-Keep your Background section short.
	-Try to tell a story, because your reader can keep track of stories much better than they can keep track of dull names like User A, User B
	-If the Background is more than three or four steps long, think about using higher-level steps or splitting the feature file in two.
	-Avoid putting technical detail

5.2 Data Tables
		1.You can in Cucumber::Ast:Table Turning the Table into an Array
		2.table.raw -->turn table into Array
		3.check for more info https://www.rubydoc.info/gems/cucumber/1.3.20/Cucumber/Ast/Table#diff!-instance_method
		4.

Side Notes : Types of Cucmber Testing :
	1.cli 
	2.gui 
	3.api

5.3 Scenario Outline (Same Scenarios different outputs)
		1.cucumber --expand (will print each example in a scenario outline as though it were a scenario)  p.s : wont work until you define the step_definition
		2.You Can use Scenarios instead of example 
		3.How Many Examples Should I Use?
							Remember your goal is readability, so don’t take this
							too far, and always test your features by getting other people to regularly read
							them and give you feedback.
		4.Multiple Tables of Examples
		5.Explain Yourself
		
5.4 Nesting Steps
		1.Ruby Multiline String %{ ... }

		2.Nested steps are a temptation. They beguile you with the idea that you can achieve something
		valuable with great ease. But this is a mirage, because anything you do with nested steps can
		be done a simpler way by using Ruby code instead.

5.5 Doc Strings
		1.Doc strings just allow you to specify a larger piece of text than you could fit
		on a single line.

		2.use these arguments to specify snippets of JSON or XML
		data when writing features for an API.

		3.You do need to be cautious when including this much detail in a scenario. It’s
		easy to create a lot of clutter with a large piece of data, making it hard to read
		the scenario as a whole.

5.6 Staying Organized with Tags and Subfolders
		1.Categorize your features
		2.You can use tags and labels
		3.Subfolders (Easiest way)
		4.Make the your structure like the table of contents of the Book
		5.To run features in Subfolders run: cucumber features/reading_reports/widgets_report.feature -r features
		6.


Tools to check:
  1.https://github.com/DatabaseCleaner/database_cleaner
  2.https://github.com/teamcapybara/capybara
  3.https://github.com/josephwilk/pairwise/wiki
  4.
